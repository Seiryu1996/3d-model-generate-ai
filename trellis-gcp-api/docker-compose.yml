version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - DATABASE_URL=sqlite:///./trellis.db
      - SECRET_KEY=dev-secret-key-change-in-production
      - RATE_LIMIT_PER_MINUTE=60
    volumes:
      - ./src:/app/src:ro
      - ./configs:/app/configs:ro
      - api_data:/app/data
    depends_on:
      - redis
      - minio
    networks:
      - trellis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TRELLIS Worker Service (GPU-enabled)
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    environment:
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - TRELLIS_MODEL_PATH=microsoft/TRELLIS-image-large
      - TRELLIS_TEXT_MODEL_PATH=microsoft/TRELLIS-text-large
      - TRELLIS_CACHE_DIR=/tmp/trellis-cache
      - SPCONV_ALGO=native
      - ATTN_BACKEND=flash-attn
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./src:/app/src:ro
      - trellis_cache:/tmp/trellis-cache
      - trellis_models:/tmp/trellis-models
      - trellis_output:/tmp/trellis-output
    depends_on:
      - redis
      - minio
    networks:
      - trellis-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Redis for job queue and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trellis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO for local object storage (S3-compatible)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    networks:
      - trellis-network
    restart: unless-stopped
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Client for bucket setup
  mc:
    image: minio/mc:latest
    depends_on:
      - minio
    networks:
      - trellis-network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add minio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb minio/trellis-models || true;
      /usr/bin/mc mb minio/trellis-input || true;
      /usr/bin/mc mb minio/trellis-output || true;
      /usr/bin/mc mb minio/trellis-temp || true;
      /usr/bin/mc policy set public minio/trellis-output || true;
      exit 0;
      "

  # Nginx for load balancing and reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    networks:
      - trellis-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  api_data:
  redis_data:
  minio_data:
  trellis_cache:
  trellis_models:
  trellis_output:

networks:
  trellis-network:
    driver: bridge