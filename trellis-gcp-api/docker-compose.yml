services:
  # API Service
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - DATABASE_URL=sqlite:///./trellis.db
      - SECRET_KEY=dev-secret-key-change-in-production
      - RATE_LIMIT_PER_MINUTE=60
    volumes:
      - ./src:/app/src
      - ./configs:/app/configs
      - api_data:/app/data
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    depends_on:
      - redis
      - minio
    networks:
      - trellis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  # Redis for job queue and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trellis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO for local object storage (S3-compatible)
  minio:
    image: minio/minio:latest
    ports:
      - "9100:9000"
      - "9101:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    networks:
      - trellis-network
    restart: unless-stopped
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Client for bucket setup
  mc:
    image: minio/mc:latest
    depends_on:
      - minio
    networks:
      - trellis-network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add minio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb minio/trellis-models || true;
      /usr/bin/mc mb minio/trellis-input || true;
      /usr/bin/mc mb minio/trellis-output || true;
      /usr/bin/mc mb minio/trellis-temp || true;
      /usr/bin/mc policy set public minio/trellis-output || true;
      exit 0;
      "

  # Mock Worker for processing jobs (without GPU)
  worker-mock:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker-mock
    container_name: trellis-gcp-api-worker-mock-1
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - SECRET_KEY=dev-secret-key-change-in-production
      - DEBUG=true
    volumes:
      - ./src:/app/src
    depends_on:
      - redis
      - api
    networks:
      - trellis-network
    healthcheck:
      test: ["CMD", "python", "-c", "print('Mock Worker running')"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: python -m src.workers.memory_worker
    profiles:
      - mock

  # TRELLIS Worker with GPU support for actual 3D model generation
  worker-trellis:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker-trellis
    container_name: trellis-gcp-api-worker-trellis-1
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - SECRET_KEY=dev-secret-key-change-in-production
      - DEBUG=true
      - SPCONV_ALGO=native
    volumes:
      - ./src:/app/src
      - ../TRELLIS:/app/TRELLIS
    depends_on:
      - redis
      - api
    networks:
      - trellis-network
    healthcheck:
      test: ["CMD", "python", "-c", "print('TRELLIS Worker running')"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: python -m src.workers.memory_worker
# GPU support disabled for CPU-only development environment
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Redis Commander for Redis management (dev tools)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - trellis-network
    profiles:
      - dev-tools

volumes:
  api_data:
  redis_data:
  minio_data:

networks:
  trellis-network:
    driver: bridge